{"ast":null,"code":"var _jsxFileName = \"/Users/matthieu/Desktop/Projets/React/App Crypto/src/components/GlobalChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Treemap, Tooltip } from \"recharts\";\nimport colors from \"../styles/_settings.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GlobalChart = _ref => {\n  _s();\n\n  let {\n    coinsData\n  } = _ref;\n  const [dataArray, setDataArray] = useState([]);\n\n  const colorPicker = number => {\n    if (number >= 20) {\n      return colors.color1;\n    } else if (number >= 5) {\n      return colors.green2;\n    } else if (number >= 0) {\n      return colors.green1;\n    } else if (number >= -5) {\n      return colors.red1;\n    } else if (number >= -20) {\n      return colors.red2;\n    } else {\n      return colors.black2;\n    }\n  };\n\n  const excludeCoin = coin => {\n    if (coin === \"usdt\" || coin === \"usdc\" || coin === \"busd\" || coin === \"dai\" || coin === \"ust\" || coin === \"mim\") {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  useEffect(() => {\n    let chartData = [];\n\n    if (coinsData.length > 0) {\n      for (let i = 0; i < 45; i++) {\n        if (excludeCoin(coinsData[i].symbol)) {\n          chartData.push({\n            name: coinsData[i].symbol.toUpperCase() + \" \" + coinsData[i].market_cap_change_percentage_24h.toFixed(1) + \"%\",\n            size: coinsData[i].market_cap,\n            fill: colorPicker(coinsData[i].market_cap_change_percentage_24h)\n          });\n        }\n      }\n    }\n\n    setDataArray(chartData);\n  }, [coinsData]);\n\n  const TreemapTooltip = _ref2 => {\n    let {\n      active,\n      payload\n    } = _ref2;\n\n    if (active && payload && payload.length) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-tooltip\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"label\",\n          children: payload[0].payload.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this);\n    }\n\n    return null;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"global-chart\",\n    children: /*#__PURE__*/_jsxDEV(Treemap, {\n      width: 730,\n      height: 181,\n      data: dataArray,\n      dataKey: \"size\",\n      stroke: \"rgb(51, 51, 51)\",\n      fill: \"black\",\n      aspectRatio: \"1\",\n      children: /*#__PURE__*/_jsxDEV(Tooltip, {\n        content: /*#__PURE__*/_jsxDEV(TreemapTooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 27\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GlobalChart, \"qXJfxCrIqd9KMzDGDz7oIam+9Ac=\");\n\n_c = GlobalChart;\nexport default GlobalChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"GlobalChart\");","map":{"version":3,"sources":["/Users/matthieu/Desktop/Projets/React/App Crypto/src/components/GlobalChart.js"],"names":["React","useEffect","useState","Treemap","Tooltip","colors","GlobalChart","coinsData","dataArray","setDataArray","colorPicker","number","color1","green2","green1","red1","red2","black2","excludeCoin","coin","chartData","length","i","symbol","push","name","toUpperCase","market_cap_change_percentage_24h","toFixed","size","market_cap","fill","TreemapTooltip","active","payload"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Treemap, Tooltip } from \"recharts\";\nimport colors from \"../styles/_settings.scss\";\n\nconst GlobalChart = ({ coinsData }) => {\n  const [dataArray, setDataArray] = useState([]);\n\n  const colorPicker = (number) => {\n    if (number >= 20) {\n      return colors.color1;\n    } else if (number >= 5) {\n      return colors.green2;\n    } else if (number >= 0) {\n      return colors.green1;\n    } else if (number >= -5) {\n      return colors.red1;\n    } else if (number >= -20) {\n      return colors.red2;\n    } else {\n      return colors.black2;\n    }\n  };\n\n  const excludeCoin = (coin) => {\n    if (\n      coin === \"usdt\" ||\n      coin === \"usdc\" ||\n      coin === \"busd\" ||\n      coin === \"dai\" ||\n      coin === \"ust\" ||\n      coin === \"mim\"\n    ) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  useEffect(() => {\n    let chartData = [];\n\n    if (coinsData.length > 0) {\n      for (let i = 0; i < 45; i++) {\n        if (excludeCoin(coinsData[i].symbol)) {\n          chartData.push({\n            name:\n              coinsData[i].symbol.toUpperCase() +\n              \" \" +\n              coinsData[i].market_cap_change_percentage_24h.toFixed(1) +\n              \"%\",\n            size: coinsData[i].market_cap,\n            fill: colorPicker(coinsData[i].market_cap_change_percentage_24h),\n          });\n        }\n      }\n    }\n    setDataArray(chartData);\n  }, [coinsData]);\n\n  const TreemapTooltip = ({ active, payload }) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"custom-tooltip\">\n          <p className=\"label\">{payload[0].payload.name}</p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div className=\"global-chart\">\n      <Treemap\n        width={730}\n        height={181}\n        data={dataArray}\n        dataKey=\"size\"\n        stroke=\"rgb(51, 51, 51)\"\n        fill=\"black\"\n        aspectRatio=\"1\"\n      >\n        <Tooltip content={<TreemapTooltip />} />\n      </Treemap>\n    </div>\n  );\n};\n\nexport default GlobalChart;\n"]},"metadata":{},"sourceType":"module"}