{"ast":null,"code":"import _slicedToArray from\"/Users/matthieu/Desktop/Projets/React/Crypto Watcher/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from\"react\";import colors from\"../styles/_settings.scss\";import{jsx as _jsx}from\"react/jsx-runtime\";var PercentChange=function PercentChange(_ref){var percent=_ref.percent;var _useState=useState(),_useState2=_slicedToArray(_useState,2),color=_useState2[0],setColor=_useState2[1];useEffect(function(){if(percent){if(percent>=0){setColor(colors.green1);}else{setColor(colors.red1);}}else{setColor(colors.white1);}},[]);return/*#__PURE__*/_jsx(\"p\",{className:\"percent-change-container\",style:{color:color},children:percent?percent.toFixed(1)+\"%\":\"-\"});};export default PercentChange;","map":{"version":3,"sources":["/Users/matthieu/Desktop/Projets/React/Crypto Watcher/src/components/PercentChange.js"],"names":["React","useEffect","useState","colors","PercentChange","percent","color","setColor","green1","red1","white1","toFixed"],"mappings":"0IAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,MAAP,KAAmB,0BAAnB,C,2CAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,MAAiB,IAAdC,CAAAA,OAAc,MAAdA,OAAc,CACrC,cAA0BH,QAAQ,EAAlC,wCAAOI,KAAP,eAAcC,QAAd,eAEAN,SAAS,CAAC,UAAM,CACd,GAAII,OAAJ,CAAa,CACX,GAAIA,OAAO,EAAI,CAAf,CAAkB,CAChBE,QAAQ,CAACJ,MAAM,CAACK,MAAR,CAAR,CACD,CAFD,IAEO,CACLD,QAAQ,CAACJ,MAAM,CAACM,IAAR,CAAR,CACD,CACF,CAND,IAMO,CACLF,QAAQ,CAACJ,MAAM,CAACO,MAAR,CAAR,CACD,CACF,CAVQ,CAUN,EAVM,CAAT,CAYA,mBACE,UAAG,SAAS,CAAC,0BAAb,CAAwC,KAAK,CAAE,CAAEJ,KAAK,CAALA,KAAF,CAA/C,UACGD,OAAO,CAAGA,OAAO,CAACM,OAAR,CAAgB,CAAhB,EAAqB,GAAxB,CAA8B,GADxC,EADF,CAKD,CApBD,CAsBA,cAAeP,CAAAA,aAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport colors from \"../styles/_settings.scss\";\n\nconst PercentChange = ({ percent }) => {\n  const [color, setColor] = useState();\n\n  useEffect(() => {\n    if (percent) {\n      if (percent >= 0) {\n        setColor(colors.green1);\n      } else {\n        setColor(colors.red1);\n      }\n    } else {\n      setColor(colors.white1);\n    }\n  }, []);\n\n  return (\n    <p className=\"percent-change-container\" style={{ color }}>\n      {percent ? percent.toFixed(1) + \"%\" : \"-\"}\n    </p>\n  );\n};\n\nexport default PercentChange;\n"]},"metadata":{},"sourceType":"module"}