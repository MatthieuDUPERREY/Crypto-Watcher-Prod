{"ast":null,"code":"import _slicedToArray from\"/Users/matthieu/Desktop/Projets/React/Crypto Watcher/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from\"react\";import{Treemap,Tooltip}from\"recharts\";import colors from\"../styles/_settings.scss\";import{jsx as _jsx}from\"react/jsx-runtime\";var GlobalChart=function GlobalChart(_ref){var coinsData=_ref.coinsData;var _useState=useState([]),_useState2=_slicedToArray(_useState,2),dataArray=_useState2[0],setDataArray=_useState2[1];var colorPicker=function colorPicker(number){if(number>=20){return colors.color1;}else if(number>=5){return colors.green2;}else if(number>=0){return colors.green1;}else if(number>=-5){return colors.red1;}else if(number>=-20){return colors.red2;}else{return colors.black2;}};var excludeCoin=function excludeCoin(coin){if(coin===\"usdt\"||coin===\"usdc\"||coin===\"busd\"||coin===\"dai\"||coin===\"ust\"||coin===\"mim\"){return false;}else{return true;}};useEffect(function(){var chartData=[];if(coinsData.length>0){for(var i=0;i<45;i++){if(excludeCoin(coinsData[i].symbol)){chartData.push({name:coinsData[i].symbol.toUpperCase()+\" \"+coinsData[i].market_cap_change_percentage_24h.toFixed(1)+\"%\",size:coinsData[i].market_cap,fill:colorPicker(coinsData[i].market_cap_change_percentage_24h)});}}}setDataArray(chartData);},[coinsData]);var TreemapTooltip=function TreemapTooltip(_ref2){var active=_ref2.active,payload=_ref2.payload;if(active&&payload&&payload.length){return/*#__PURE__*/_jsx(\"div\",{className:\"custom-tooltip\",children:/*#__PURE__*/_jsx(\"p\",{className:\"label\",children:payload[0].payload.name})});}return null;};return/*#__PURE__*/_jsx(\"div\",{className:\"global-chart\",children:/*#__PURE__*/_jsx(Treemap,{width:730,height:181,data:dataArray,dataKey:\"size\",stroke:\"rgb(51, 51, 51)\",fill:\"black\",aspectRatio:\"1\",children:/*#__PURE__*/_jsx(Tooltip,{content:/*#__PURE__*/_jsx(TreemapTooltip,{})})})});};export default GlobalChart;","map":{"version":3,"sources":["/Users/matthieu/Desktop/Projets/React/Crypto Watcher/src/components/GlobalChart.js"],"names":["React","useEffect","useState","Treemap","Tooltip","colors","GlobalChart","coinsData","dataArray","setDataArray","colorPicker","number","color1","green2","green1","red1","red2","black2","excludeCoin","coin","chartData","length","i","symbol","push","name","toUpperCase","market_cap_change_percentage_24h","toFixed","size","market_cap","fill","TreemapTooltip","active","payload"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Treemap, Tooltip } from \"recharts\";\nimport colors from \"../styles/_settings.scss\";\n\nconst GlobalChart = ({ coinsData }) => {\n  const [dataArray, setDataArray] = useState([]);\n\n  const colorPicker = (number) => {\n    if (number >= 20) {\n      return colors.color1;\n    } else if (number >= 5) {\n      return colors.green2;\n    } else if (number >= 0) {\n      return colors.green1;\n    } else if (number >= -5) {\n      return colors.red1;\n    } else if (number >= -20) {\n      return colors.red2;\n    } else {\n      return colors.black2;\n    }\n  };\n\n  const excludeCoin = (coin) => {\n    if (\n      coin === \"usdt\" ||\n      coin === \"usdc\" ||\n      coin === \"busd\" ||\n      coin === \"dai\" ||\n      coin === \"ust\" ||\n      coin === \"mim\"\n    ) {\n      return false;\n    } else {\n      return true;\n    }\n  };\n\n  useEffect(() => {\n    let chartData = [];\n\n    if (coinsData.length > 0) {\n      for (let i = 0; i < 45; i++) {\n        if (excludeCoin(coinsData[i].symbol)) {\n          chartData.push({\n            name:\n              coinsData[i].symbol.toUpperCase() +\n              \" \" +\n              coinsData[i].market_cap_change_percentage_24h.toFixed(1) +\n              \"%\",\n            size: coinsData[i].market_cap,\n            fill: colorPicker(coinsData[i].market_cap_change_percentage_24h),\n          });\n        }\n      }\n    }\n    setDataArray(chartData);\n  }, [coinsData]);\n\n  const TreemapTooltip = ({ active, payload }) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"custom-tooltip\">\n          <p className=\"label\">{payload[0].payload.name}</p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  return (\n    <div className=\"global-chart\">\n      <Treemap\n        width={730}\n        height={181}\n        data={dataArray}\n        dataKey=\"size\"\n        stroke=\"rgb(51, 51, 51)\"\n        fill=\"black\"\n        aspectRatio=\"1\"\n      >\n        <Tooltip content={<TreemapTooltip />} />\n      </Treemap>\n    </div>\n  );\n};\n\nexport default GlobalChart;\n"]},"metadata":{},"sourceType":"module"}